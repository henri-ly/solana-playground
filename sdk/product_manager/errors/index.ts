/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * IncorrectAuthority: 'Wrong authority'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAuthorityError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'IncorrectAuthority'
  constructor() {
    super('Wrong authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new IncorrectAuthorityError())
createErrorFromNameLookup.set(
  'IncorrectAuthority',
  () => new IncorrectAuthorityError()
)

/**
 * IncorrectOwner: 'Wrong owner on a token account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOwnerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'IncorrectOwner'
  constructor() {
    super('Wrong owner on a token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new IncorrectOwnerError())
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError())

/**
 * IncorrectMint: 'Wrong mint on a token account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectMintError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'IncorrectMint'
  constructor() {
    super('Wrong mint on a token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new IncorrectMintError())
createErrorFromNameLookup.set('IncorrectMint', () => new IncorrectMintError())

/**
 * IncorrectProduct: 'Wrong product on a escrow'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectProductError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'IncorrectProduct'
  constructor() {
    super('Wrong product on a escrow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectProductError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new IncorrectProductError())
createErrorFromNameLookup.set(
  'IncorrectProduct',
  () => new IncorrectProductError()
)

/**
 * TimeExpired: 'Your time to accept or deny propossal has expired'
 *
 * @category Errors
 * @category generated
 */
export class TimeExpiredError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'TimeExpired'
  constructor() {
    super('Your time to accept or deny propossal has expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TimeExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new TimeExpiredError())
createErrorFromNameLookup.set('TimeExpired', () => new TimeExpiredError())

/**
 * CannotRecoverYet: 'Payment recovery is not allowed at this time'
 *
 * @category Errors
 * @category generated
 */
export class CannotRecoverYetError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'CannotRecoverYet'
  constructor() {
    super('Payment recovery is not allowed at this time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotRecoverYetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new CannotRecoverYetError())
createErrorFromNameLookup.set(
  'CannotRecoverYet',
  () => new CannotRecoverYetError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
