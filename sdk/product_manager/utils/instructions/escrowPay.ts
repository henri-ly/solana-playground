/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category EscrowPay
 * @category generated
 */
export type EscrowPayInstructionArgs = {
  productAmount: beet.bignum
  expireTime: beet.bignum
}
/**
 * @category Instructions
 * @category EscrowPay
 * @category generated
 */
export const escrowPayStruct = new beet.BeetArgsStruct<
  EscrowPayInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['productAmount', beet.u64],
    ['expireTime', beet.i64],
  ],
  'EscrowPayInstructionArgs'
)
/**
 * Accounts required by the _escrowPay_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] seller
 * @property [_writable_] product
 * @property [_writable_] escrow
 * @property [_writable_] escrowVault
 * @property [_writable_] transferVault
 * @property [] paymentMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category EscrowPay
 * @category generated
 */
export type EscrowPayInstructionAccounts = {
  signer: web3.PublicKey
  seller: web3.PublicKey
  product: web3.PublicKey
  escrow: web3.PublicKey
  escrowVault: web3.PublicKey
  transferVault: web3.PublicKey
  paymentMint: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const escrowPayInstructionDiscriminator = [
  152, 157, 10, 85, 249, 58, 127, 52,
]

/**
 * Creates a _EscrowPay_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category EscrowPay
 * @category generated
 */
export function createEscrowPayInstruction(
  accounts: EscrowPayInstructionAccounts,
  args: EscrowPayInstructionArgs,
  programId = new web3.PublicKey('6NSfzFwHeuDCLzFwAo3yQ2KLLb9bThvkEVyeWChoAqBa')
) {
  const [data] = escrowPayStruct.serialize({
    instructionDiscriminator: escrowPayInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.seller,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.product,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transferVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
