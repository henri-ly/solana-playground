/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * IncorrectAuthority: 'Wrong authority'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectAuthorityError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'IncorrectAuthority'
  constructor() {
    super('Wrong authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new IncorrectAuthorityError())
createErrorFromNameLookup.set(
  'IncorrectAuthority',
  () => new IncorrectAuthorityError()
)

/**
 * IncorrectOwner: 'Wrong owner on a token account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOwnerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'IncorrectOwner'
  constructor() {
    super('Wrong owner on a token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new IncorrectOwnerError())
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError())

/**
 * IncorrectMint: 'Wrong mint on a token account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectMintError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'IncorrectMint'
  constructor() {
    super('Wrong mint on a token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new IncorrectMintError())
createErrorFromNameLookup.set('IncorrectMint', () => new IncorrectMintError())

/**
 * CreateAccountError: 'Error create account'
 *
 * @category Errors
 * @category generated
 */
export class CreateAccountErrorError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'CreateAccountError'
  constructor() {
    super('Error create account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CreateAccountErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new CreateAccountErrorError())
createErrorFromNameLookup.set(
  'CreateAccountError',
  () => new CreateAccountErrorError()
)

/**
 * ErrorInitNotTransferable: 'Error not transferable mint cpi'
 *
 * @category Errors
 * @category generated
 */
export class ErrorInitNotTransferableError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'ErrorInitNotTransferable'
  constructor() {
    super('Error not transferable mint cpi')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ErrorInitNotTransferableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new ErrorInitNotTransferableError())
createErrorFromNameLookup.set(
  'ErrorInitNotTransferable',
  () => new ErrorInitNotTransferableError()
)

/**
 * ExtensionNotSupported: 'Extension not supported'
 *
 * @category Errors
 * @category generated
 */
export class ExtensionNotSupportedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'ExtensionNotSupported'
  constructor() {
    super('Extension not supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExtensionNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new ExtensionNotSupportedError())
createErrorFromNameLookup.set(
  'ExtensionNotSupported',
  () => new ExtensionNotSupportedError()
)

/**
 * InitMintError: 'Error init mint cpi'
 *
 * @category Errors
 * @category generated
 */
export class InitMintErrorError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InitMintError'
  constructor() {
    super('Error init mint cpi')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InitMintErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InitMintErrorError())
createErrorFromNameLookup.set('InitMintError', () => new InitMintErrorError())

/**
 * IncorrectSeeds: 'Incorrect seeds'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectSeedsError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'IncorrectSeeds'
  constructor() {
    super('Incorrect seeds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectSeedsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new IncorrectSeedsError())
createErrorFromNameLookup.set('IncorrectSeeds', () => new IncorrectSeedsError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
