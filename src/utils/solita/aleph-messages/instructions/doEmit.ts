/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DoEmit
 * @category generated
 */
export type DoEmitInstructionArgs = {
  message: string
}
/**
 * @category Instructions
 * @category DoEmit
 * @category generated
 */
export const doEmitStruct = new beet.FixableBeetArgsStruct<
  DoEmitInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['message', beet.utf8String],
  ],
  'DoEmitInstructionArgs'
)
/**
 * Accounts required by the _doEmit_ instruction
 *
 * @property [_writable_, **signer**] sender
 * @category Instructions
 * @category DoEmit
 * @category generated
 */
export type DoEmitInstructionAccounts = {
  sender: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const doEmitInstructionDiscriminator = [
  60, 75, 255, 45, 231, 239, 166, 237,
]

/**
 * Creates a _DoEmit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DoEmit
 * @category generated
 */
export function createDoEmitInstruction(
  accounts: DoEmitInstructionAccounts,
  args: DoEmitInstructionArgs,
  programId = new web3.PublicKey('ALepH1n9jxScbz45aZhBYVa35zxBNbKSvL6rWQpb4snc')
) {
  const [data] = doEmitStruct.serialize({
    instructionDiscriminator: doEmitInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.sender,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
