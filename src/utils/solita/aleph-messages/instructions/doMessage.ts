/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DoMessage
 * @category generated
 */
export type DoMessageInstructionArgs = {
  msgtype: string
  msgcontent: string
}
/**
 * @category Instructions
 * @category DoMessage
 * @category generated
 */
export const doMessageStruct = new beet.FixableBeetArgsStruct<
  DoMessageInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['msgtype', beet.utf8String],
    ['msgcontent', beet.utf8String],
  ],
  'DoMessageInstructionArgs'
)

/**
 * Accounts required by the _doMessage_ instruction
 *
 * @property [_writable_, **signer**] sender
 * @category Instructions
 * @category DoMessage
 * @category generated
 */
export type DoMessageInstructionAccounts = {
  sender: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const doMessageInstructionDiscriminator = [
  72, 57, 125, 74, 188, 18, 144, 166,
]

/**
 * Creates a _DoMessage_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DoMessage
 * @category generated
 */
export function createDoMessageInstruction(
  accounts: DoMessageInstructionAccounts,
  args: DoMessageInstructionArgs,
  programId = new web3.PublicKey('ALepH1n9jxScbz45aZhBYVa35zxBNbKSvL6rWQpb4snc')
) {
  const [data] = doMessageStruct.serialize({
    instructionDiscriminator: doMessageInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.sender,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
